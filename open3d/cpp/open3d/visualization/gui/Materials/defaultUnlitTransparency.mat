material {
    name : defaultUnlitTransparency,
    shadingModel : unlit,
    blending : transparent,
    transparency : twoPassesOneSide,

    parameters : [
        { type : float4,    name : baseColor },
        { type : float,     name : pointSize },
        { type : sampler2d, name : albedo }
    ],
    requires : [
        color, uv0
    ]
}

vertex {
    void materialVertex(inout MaterialVertexInputs material) {
        gl_PointSize = materialParams.pointSize;
    }
}

fragment {
    void material(inout MaterialInputs material) {
        prepareMaterial(material);

        float4 tex_color = texture(materialParams_albedo, getUV0());
        float combined_alpha = tex_color.a * materialParams.baseColor.a;

        // Pre-multiply alpha
        material.baseColor.rgb = materialParams.baseColor.rgb * getColor().rgb * tex_color.rgb * combined_alpha;
        material.baseColor.a = combined_alpha;
    }
}
